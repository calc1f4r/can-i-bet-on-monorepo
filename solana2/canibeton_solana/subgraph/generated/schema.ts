// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
import {
  BigDecimal,
  BigInt,
  Bytes,
  Entity,
  TypedMap,
  Value,
  ValueKind,
  store,
} from '@graphprotocol/graph-ts';

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Pool entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Pool', id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pool | null {
    return changetype<Pool | null>(store.get_in_block('Pool', id));
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get('Pool', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get poolIntId(): BigInt {
    let value = this.get('poolIntId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set poolIntId(value: BigInt) {
    this.set('poolIntId', Value.fromBigInt(value));
  }

  get question(): string {
    let value = this.get('question');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set question(value: string) {
    this.set('question', Value.fromString(value));
  }

  get options(): Array<string> {
    let value = this.get('options');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toStringArray();
    }
  }

  set options(value: Array<string>) {
    this.set('options', Value.fromStringArray(value));
  }

  get betsCloseAt(): BigInt {
    let value = this.get('betsCloseAt');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set betsCloseAt(value: BigInt) {
    this.set('betsCloseAt', Value.fromBigInt(value));
  }

  get decisionTime(): BigInt {
    let value = this.get('decisionTime');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set decisionTime(value: BigInt) {
    this.set('decisionTime', Value.fromBigInt(value));
  }

  get usdcBetTotalsByOption(): Array<BigInt> {
    let value = this.get('usdcBetTotalsByOption');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigIntArray();
    }
  }

  set usdcBetTotalsByOption(value: Array<BigInt>) {
    this.set('usdcBetTotalsByOption', Value.fromBigIntArray(value));
  }

  get pointsBetTotalsByOption(): Array<BigInt> {
    let value = this.get('pointsBetTotalsByOption');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigIntArray();
    }
  }

  set pointsBetTotalsByOption(value: Array<BigInt>) {
    this.set('pointsBetTotalsByOption', Value.fromBigIntArray(value));
  }

  get winningOption(): BigInt {
    let value = this.get('winningOption');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set winningOption(value: BigInt) {
    this.set('winningOption', Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get('status');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set('status', Value.fromString(value));
  }

  get isDraw(): boolean {
    let value = this.get('isDraw');
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDraw(value: boolean) {
    this.set('isDraw', Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get('createdAt');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set('createdAt', Value.fromBigInt(value));
  }

  get category(): string {
    let value = this.get('category');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set('category', Value.fromString(value));
  }

  get creatorName(): string {
    let value = this.get('creatorName');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set creatorName(value: string) {
    this.set('creatorName', Value.fromString(value));
  }

  get creatorId(): string {
    let value = this.get('creatorId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set creatorId(value: string) {
    this.set('creatorId', Value.fromString(value));
  }

  get closureCriteria(): string {
    let value = this.get('closureCriteria');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set closureCriteria(value: string) {
    this.set('closureCriteria', Value.fromString(value));
  }

  get closureInstructions(): string {
    let value = this.get('closureInstructions');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set closureInstructions(value: string) {
    this.set('closureInstructions', Value.fromString(value));
  }

  get imageUrl(): string {
    let value = this.get('imageUrl');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set imageUrl(value: string) {
    this.set('imageUrl', Value.fromString(value));
  }

  get twitterPostId(): string {
    let value = this.get('twitterPostId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set twitterPostId(value: string) {
    this.set('twitterPostId', Value.fromString(value));
  }

  get creationTxHash(): string {
    let value = this.get('creationTxHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set creationTxHash(value: string) {
    this.set('creationTxHash', Value.fromString(value));
  }
}

export class PoolCreated extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save PoolCreated entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('PoolCreated', id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolCreated | null {
    return changetype<PoolCreated | null>(store.get_in_block('PoolCreated', id));
  }

  static load(id: string): PoolCreated | null {
    return changetype<PoolCreated | null>(store.get('PoolCreated', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get poolId(): BigInt {
    let value = this.get('poolId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt) {
    this.set('poolId', Value.fromBigInt(value));
  }

  get question(): string {
    let value = this.get('question');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set question(value: string) {
    this.set('question', Value.fromString(value));
  }

  get options(): Array<string> {
    let value = this.get('options');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toStringArray();
    }
  }

  set options(value: Array<string>) {
    this.set('options', Value.fromStringArray(value));
  }

  get betsCloseAt(): BigInt {
    let value = this.get('betsCloseAt');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set betsCloseAt(value: BigInt) {
    this.set('betsCloseAt', Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get('createdAt');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set('createdAt', Value.fromBigInt(value));
  }

  get imageUrl(): string {
    let value = this.get('imageUrl');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set imageUrl(value: string) {
    this.set('imageUrl', Value.fromString(value));
  }

  get category(): string {
    let value = this.get('category');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set('category', Value.fromString(value));
  }

  get creatorName(): string {
    let value = this.get('creatorName');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set creatorName(value: string) {
    this.set('creatorName', Value.fromString(value));
  }

  get creatorId(): string {
    let value = this.get('creatorId');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set creatorId(value: string) {
    this.set('creatorId', Value.fromString(value));
  }

  get closureCriteria(): string {
    let value = this.get('closureCriteria');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set closureCriteria(value: string) {
    this.set('closureCriteria', Value.fromString(value));
  }

  get closureInstructions(): string {
    let value = this.get('closureInstructions');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set closureInstructions(value: string) {
    this.set('closureInstructions', Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get('txHash');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set txHash(value: string) {
    this.set('txHash', Value.fromString(value));
  }
}
