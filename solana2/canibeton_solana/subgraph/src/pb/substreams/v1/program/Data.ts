// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3
import { Reader, Writer } from 'as-proto';

import { CreatePool_Instruction } from './CreatePool_Instruction';
import { Initialize_Instruction } from './Initialize_Instruction';
import { PoolCreated_Event } from './PoolCreated_Event';

export class Data {
  static encode(message: Data, writer: Writer): void {
    const poolCreatedEventList = message.poolCreatedEventList;
    for (let i: i32 = 0; i < poolCreatedEventList.length; ++i) {
      writer.uint32(10);
      writer.fork();
      PoolCreated_Event.encode(poolCreatedEventList[i], writer);
      writer.ldelim();
    }

    const createPoolInstructionList = message.createPoolInstructionList;
    for (let i: i32 = 0; i < createPoolInstructionList.length; ++i) {
      writer.uint32(18);
      writer.fork();
      CreatePool_Instruction.encode(createPoolInstructionList[i], writer);
      writer.ldelim();
    }

    const initializeInstructionList = message.initializeInstructionList;
    for (let i: i32 = 0; i < initializeInstructionList.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Initialize_Instruction.encode(initializeInstructionList[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Data {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Data();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolCreatedEventList.push(PoolCreated_Event.decode(reader, reader.uint32()));
          break;

        case 2:
          message.createPoolInstructionList.push(
            CreatePool_Instruction.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.initializeInstructionList.push(
            Initialize_Instruction.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  poolCreatedEventList: Array<PoolCreated_Event>;
  createPoolInstructionList: Array<CreatePool_Instruction>;
  initializeInstructionList: Array<Initialize_Instruction>;

  constructor(
    poolCreatedEventList: Array<PoolCreated_Event> = [],
    createPoolInstructionList: Array<CreatePool_Instruction> = [],
    initializeInstructionList: Array<Initialize_Instruction> = []
  ) {
    this.poolCreatedEventList = poolCreatedEventList;
    this.createPoolInstructionList = createPoolInstructionList;
    this.initializeInstructionList = initializeInstructionList;
  }
}
