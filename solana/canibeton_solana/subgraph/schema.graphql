enum PoolStatus {
  NONE
  PENDING
  GRADED
  REGRADED
}

enum BetOutcome {
  NONE
  WON
  LOST
  VOIDED
  DRAW
}

enum TokenType {
  USDC
  POINTS
}

type Pool @entity {
  id: ID!
  poolIntId: BigInt! # u64
  question: String! # string
  options: [String!]! # [String; 2]
  betsCloseAt: BigInt! # i64
  decisionTime: BigInt! # i64
  usdcBetTotalsByOption: [BigInt!]! # [u64; 2]
  pointsBetTotalsByOption: [BigInt!]! # [u64; 2]
  winningOption: BigInt! # u64
  status: PoolStatus!
  isDraw: Boolean!
  createdAt: BigInt! # i64
  category: String!
  creatorName: String!
  creatorId: String!
  closureCriteria: String!
  closureInstructions: String!
  imageUrl: String!
  twitterPostId: String!
  creationTxHash: String!
  bets: [Bet!]! @derivedFrom(field: "pool")
}

type PoolCreated @entity(immutable: true) {
  id: ID!
  poolId: BigInt! # u64
  question: String! # string
  options: [String!]! # [String; 2]
  betsCloseAt: BigInt! # i64
  createdAt: BigInt! # i64
  imageUrl: String!
  category: String!
  creatorName: String!
  creatorId: String!
  closureCriteria: String!
  closureInstructions: String!
  txHash: String!
}

type Bet @entity {
  id: ID!
  betIntId: BigInt! # u64
  poolIntId: BigInt! # u64
  pool: Pool! # Relationship to pool
  userAddress: String! # Pubkey as string
  optionIndex: BigInt! # u64
  amount: BigInt! # u64
  createdAt: BigInt! # i64
  # updatedAt field is kept for backward compatibility but no longer used
  updatedAt: BigInt! # i64
  isPayedOut: Boolean! # bool
  outcome: BetOutcome! # enum
  tokenType: TokenType! # enum
  transactionHash: String! # tx_hash
}

type BetPlaced @entity(immutable: true) {
  id: ID!
  betId: BigInt! # u64
  poolId: BigInt! # u64
  user: String! # Pubkey as string
  optionIndex: BigInt! # u64
  amount: BigInt! # u64
  tokenType: TokenType! # enum
  createdAt: BigInt! # i64
  transactionHash: String! # tx_hash
  bet: Bet # Relationship to bet entity
  pool: Pool # Relationship to pool entity
}
